#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/carthage_archive'
require_relative '../lib/configuration'
require_relative '../lib/server_api'
require_relative '../lib/utils'

ARGV << '-h' if ARGV.empty?
options = {
    :verbose => false,
}
opt_parser = OptionParser.new do |opt|
    opt.banner = "carthage-rc COMMAND [OPTIONS]"
    opt.separator ""
    opt.separator "Available commands:"
    opt.separator "    config"
    opt.separator "        prints environment and Cartrcfile configuration"
    opt.separator ""
    opt.separator "    list-built-frameworks"
    opt.separator "        find frameworks which are available for upload"
    opt.separator ""
    opt.separator "    upload"
    opt.separator "        archive frameworks in Carthage/Build and upload them to the server"
    opt.separator ""

    opt.on("-h", "--help", "Show help") do
        puts opt_parser
        exit
    end

    opt.on("-v", "--verbose", "Show extra runtime information") do
        options[:verbose] = true
    end
end

opt_parser.parse!

config = Configuration.new(options)
api = ServerAPI.new(config, options)

command = ARGV[0]
case command
when "config"
    puts config
when "list-build-frameworks"
    frameworks = Dir.glob('Carthage/Build/**/*.framework').map { |path| File.basename(path) }
    puts "Found following frameworks:"
    puts frameworks.uniq.sort
when "upload"
    puts "All framework names: #{config.framework_names}" if options[:verbose]
    for carthage_dependency in config.carthage_dependencies
        for framework_name in carthage_dependency.framework_names(config)
            for platform in config.platforms
                next if api.framework_exists(carthage_dependency, framework_name, platform)
                archive = CarthageArchive.new(framework_name, platform)
                archive_created = archive.create_archive(options)
                next unless archive_created
                begin
                    api.upload_framework(archive.archive_path, carthage_dependency, framework_name, platform)
                ensure
                    archive.delete_archive
                end
            end
        end
    end
else
    if command.nil?
        raise "Command is missing, run with --help  to show available commands"
    else
        raise "Unsupported command #{command}, run with --help to show available commands"
    end
end
