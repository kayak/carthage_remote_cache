#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)

require 'optparse'
require 'carthage_remote_cache'
require 'commands'

ARGV << '-h' if ARGV.empty?
options = {
    :force => false,
    :server_port => SERVER_DEFAULT_PORT,
    :verbose => false,
}
opt_parser = OptionParser.new do |opt|
    opt.banner = "carthagerc COMMAND [OPTIONS]"
    opt.separator ""
    opt.separator "DESCRIPTION"
    opt.separator "    carthagerc is a centralized remote cache for Carthage framework artifacts. Check out project information at https://github.com/kayak/carthage_remote_cache"
    opt.separator ""
    opt.separator "QUICKSTART"
    opt.separator "    1. Run `carthagerc server` to start the cache on a remote server"
    opt.separator "    2. `cd` to your project's root folder"
    opt.separator "    3. Run `carthagerc init` to create #{CARTRCFILE} and point the server property to your running server URL"
    opt.separator "    4. Assuming your #{CARTHAGE_DIR} directory is already built, run `carthagerc upload` to populate remote cache"
    opt.separator "    5. Push your `CARTRCFILE` and from a different machine run `cartrcfile download` to fetch frameworks into #{CARTHAGE_BUILD_DIR} folder"
    opt.separator "    6. Profit"
    opt.separator ""
    opt.separator "COMMANDS"
    opt.separator "    config"
    opt.separator "        prints environment information and #{CARTRCFILE} configuration"
    opt.separator ""
    opt.separator "    download [-f|--force] [-v|--verbose]"
    opt.separator "        fetch missing frameworks into Carthage/Build"
    opt.separator ""
    opt.separator "    init"
    opt.separator "        create initial #{CARTRCFILE} in current directory"
    opt.separator ""
    opt.separator "    upload [-f|--force] [-v|--verbose]"
    opt.separator "        archive frameworks in Carthage/Build and upload them to the server"
    opt.separator ""
    opt.separator "    server [-pPORT|--port=PORT]"
    opt.separator "        start cache server"
    opt.separator ""
    opt.separator "OPTIONS"

    opt.on("-f", "--force", "Force upload/download of framework archives even if local and server .version files match") do
        options[:force] = true
    end

    opt.on("-h", "--help", "Show help") do
        puts opt_parser
        exit
    end

    opt.on("-pPORT", "--port=PORT", "Server application port used when starting server, default port is #{SERVER_DEFAULT_PORT}") do |port|
        options[:server_port] = port
    end

    opt.on("-v", "--verbose", "Show extra runtime information") do
        $LOG.level = Logger::DEBUG
    end
end

opt_parser.parse!

command = ARGV[0]
case command
when "config"
    puts Configuration.new
when "download"
    DownloadCommand.new(options).run
when "init"
    InitCommand.new(options).run
when "upload"
    UploadCommand.new(options).run
when "server"
    ServerCommand.new(options).run
else
    bail("Unsupported command #{command}, run with --help to show available commands")
end
