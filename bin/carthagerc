#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)

require 'optparse'
require 'carthage_remote_cache'
require 'commands'

ARGV << '-h' if ARGV.empty?
options = {
    :server_port => 9292,
    :verbose => false,
}
opt_parser = OptionParser.new do |opt|
    opt.banner = "carthagerc COMMAND [OPTIONS]"
    opt.separator ""
    opt.separator "Available commands:"
    opt.separator "    server"
    opt.separator "        starts cache server"
    opt.separator ""
    opt.separator "    config"
    opt.separator "        prints environment and Cartrcfile configuration"
    opt.separator ""
    opt.separator "    list-built-frameworks"
    opt.separator "        find frameworks which are available for upload"
    opt.separator ""
    opt.separator "    download"
    opt.separator "        fetch all frameworks into Carthage/Build"
    opt.separator ""
    opt.separator "    upload"
    opt.separator "        archive frameworks in Carthage/Build and upload them to the server"
    opt.separator ""

    opt.on("-h", "--help", "Show help") do
        puts opt_parser
        exit
    end

    opt.on("-pPORT", "--port=PORT", "Server application port used when starting server") do |port|
        options[:server_port] = port
    end

    opt.on("-v", "--verbose", "Show extra runtime information") do
        options[:verbose] = true
    end
end

opt_parser.parse!

command = ARGV[0]
case command
when "server"
    ServerCommand.new(options).run
when "config"
    config = Configuration.new(options)
    api = ServerAPI.new(config, options)
    puts config
when "list-build-frameworks"
    frameworks = Dir.glob('Carthage/Build/**/*.framework').map { |path| File.basename(path) }
    puts "Found following frameworks:"
    puts frameworks.uniq.sort
when "download"
    DownloadCommand.new(options).run
when "upload"
    UploadCommand.new(options).run
else
    if command.nil?
        raise "Command is missing, run with --help  to show available commands"
    else
        raise "Unsupported command #{command}, run with --help to show available commands"
    end
end
